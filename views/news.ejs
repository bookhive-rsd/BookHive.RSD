<!DOCTYPE html>
<html lang="en">
<head>
  <base href="/bookhive/">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>NewsToday - BookHive</title>
  <link rel="stylesheet" href="/css/style.css">
  <link rel="stylesheet" href="/css/chat.css">
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <!-- Quill CDN -->
  <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
  <style>
    .welcome-text {
      color: yellow;
      font-size: 1.0rem;
      font-weight: 600;
      text-shadow: 0 2px 4px rgba(0, 0, 0, 1.5);
      animation: bouncingText 2s infinite; /* Applying the animation */
      font-family: 'Poppins', sans-serif;
      text-decoration: none;
    }
    .welcome-link {
      text-decoration: none;
    }
    @keyframes bouncingText {
        0%, 20%, 50%, 80%, 100% {
            transform: translateY(0);
        }
        40% {
            transform: translateY(-20px);
        }
        60% {
            transform: translateY(-10px);
        }
    }
    .chatbot-wrapper {
        position: fixed;
        bottom: 25px; /* Adjust to match desired distance from bottom */
        right: 18px; /* Adjust to match desired distance from right */
        z-index: 1000;
    }

    /* Chatbot Toggle Button Styles (already exists, but ensure it's here) */
    .chatbot-toggle-btn {
        width: 49px;
        height: 46px;
        background-color: #0a66c2; /* A blue matching the theme */
        color: white;
        border: none;
        border-radius: 50%;
        cursor: pointer;
        box-shadow: 0 4px 10px rgba(0,0,0,0.2);
        display: flex;
        justify-content: center;
        align-items: center;
        transition: transform 0.2s ease-in-out, background-color 0.2s;
        font-size: 1.5rem;
    }

    .chatbot-toggle-btn:hover {
        transform: scale(1.1);
        background-color: #004182;
    }

    /* Chatbot Container Styles (Adjusted for "whiteboard" effect) */
    .chatbot-container {
        position: absolute; /* Positioned relative to .chatbot-wrapper */
        bottom: calc(100% + -6px); /* Place 15px above the toggle button */
        right: 46px; /* Align with the right edge of the wrapper/button */
        width: 350px; /* Adjust width as desired */
        max-height: 450px; /* Adjust max height as desired */
        background-color: #ffffff; /* White background for whiteboard look */
        border-radius: 10px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        display: flex;
        flex-direction: column;
        overflow: hidden; /* Hide scrollbars for container itself */
        opacity: 0; /* Start hidden */
        visibility: hidden; /* Start hidden */
        transform: translateY(10px); /* Slight initial offset for animation */
        transition: opacity 0.3s ease-out, transform 0.3s ease-out, visibility 0.3s;
    }

    /* Active state for the chatbot container */
    .chatbot-container.active {
        opacity: 1;
        visibility: visible;
        transform: translateY(0);
    }

    /* Chatbot Header */
    .chatbot-header {
        background-color: #0a66c2;
        color: white;
        padding: 10px 15px;
        font-weight: bold;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-top-left-radius: 10px; /* Match container border-radius */
        border-top-right-radius: 10px; /* Match container border-radius */
    }

    .chatbot-close-btn {
        background: none;
        border: none;
        color: white;
        font-size: 1.5rem;
        cursor: pointer;
        line-height: 1; /* Ensure good alignment */
    }

    /* Chatbot Body (message display area) */
    .chatbot-body {
        flex-grow: 1;
        padding: 15px;
        overflow-y: auto; /* Enable scrolling for messages */
        background-color: #f9f9f9;
    }

    /* Chat message styling */
    .chat-message {
        margin-bottom: 10px;
        max-width: 80%;
        word-wrap: break-word; /* Ensure long words wrap */
    }

    .chat-message p {
        padding: 8px 12px;
        border-radius: 15px;
        line-height: 1.4;
    }

    .chat-message.user {
        align-self: flex-end;
        margin-left: auto; /* Push user messages to the right */
        background-color: #e0f2f7; /* Light blue for user messages */
        color: #333;
        border-bottom-right-radius: 0;
    }

    .chat-message.bot {
        align-self: flex-start;
        margin-right: auto; /* Push bot messages to the left */
        background-color: #f1f0f0; /* Light gray for bot messages */
        color: #333;
        border-bottom-left-radius: 0;
    }

    /* Loading indicator for bot typing */
    .chat-message.loading p {
        display: flex;
        gap: 3px;
        background-color: #f1f0f0;
        width: fit-content; /* Adjust width to content */
    }
    .chat-message.loading p span {
        width: 8px;
        height: 8px;
        background-color: #aaa;
        border-radius: 50%;
        animation: bounce 1.4s infinite ease-in-out both;
    }
    .chat-message.loading p span:nth-child(1) { animation-delay: -0.32s; }
    .chat-message.loading p span:nth-child(2) { animation-delay: -0.16s; }
    .chat-message.loading p span:nth-child(3) { animation-delay: 0s; }

    @keyframes bounce {
      0%, 80%, 100% { transform: scale(0); }
      40% { transform: scale(1); }
    }


    /* Chatbot Input Area */
    .chatbot-input-container {
        display: flex;
        padding: 10px 15px;
        border-top: 1px solid #eee;
        background-color: #f0f2f5;
        border-bottom-left-radius: 10px; /* Match container border-radius */
        border-bottom-right-radius: 10px; /* Match container border-radius */
    }

    .chatbot-input-container input[type="text"] {
        flex-grow: 1;
        border: 1px solid #ccc;
        border-radius: 20px;
        padding: 8px 12px;
        font-size: 0.9rem;
        outline: none;
        margin-right: 8px;
    }

    .chatbot-input-container button {
        background-color: #0a66c2;
        color: white;
        border: none;
        border-radius: 20px;
        padding: 8px 15px;
        cursor: pointer;
        font-weight: 600;
        transition: background-color 0.2s;
    }

    .chatbot-input-container button:hover {
        background-color: #004182;
    }
  </style>
</head>
<body>
  <header class="header">
    <div class="container">
      <div class="logo-section">
        <a href="/">
          <img src="/images/logo-removebg-preview.png" alt="BookHive Logo" class="logo">
        </a>
        <a href="/infographic" class="welcome-link">
          <div class="welcome-text">Welcome to BookHive, <%= user.username %></div>
        </a>
      </div>
      <nav class="nav-menu">
          <!-- <a href="/applications" class="nav-link"><i class="fas fa-th"></i> Applications</a> -->
          <a href="/news" class="nav-link active"><i class="fas fa-newspaper"></i> News</a>
          <a href="/publications" class="nav-link"><i class="fas fa-book-open"></i> Publications</a>
          <a href="/bookhive" class="nav-link"><i class="fas fa-book"></i> BookHive</a>
          <a href="/community" class="nav-link"><i class="fas fa-comments"></i> Community</a>
          <!-- <a href="/account" class="nav-link"><i class="fas fa-user"></i> Account</a> -->
          <a href="/logout" class="nav-link"><i class="fas fa-sign-out-alt"></i> Logout</a>
      </nav>
  </header>

  <main class="container">
    <h2>NewsToday</h2>

    <!-- Admin News Creation Form -->
    <% if (user && user.isAdmin) { %>
      <section id="news-form">
        <h3>Create News Post</h3>
        <form id="news-create-form" action="/admin/news/post" method="POST" enctype="multipart/form-data">
          <input type="text" id="news-title" name="title" placeholder="News Title" required>
          <div id="news-editor-container">
            <div id="news-editor"></div>
          </div>
          <input type="hidden" id="news-content" name="content">
          <input type="file" id="news-image" name="image" accept="image/jpeg,image/png">
          <button type="submit" id="submit-news">Post News</button>
        </form>
      </section>
    <% } %>

    <div class="share-action-buttons">
      <div class="share-container">
        <div class="share-toggle" title="Share News">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
            <path d="M18 16.08c-.76 0-1.44.3-1.96.77L8.91 12.7c.05-.23.09-.46.09-.7s-.04-.47-.09-.7l7.05-4.11c.54.5 1.25.81 2.04.81 1.66 0 3-1.34 3-3s-1.34-3-3-3-3 1.34-3 3c0 .24.04.47.09.7L8.04 9.81C7.5 9.31 6.79 9 6 9c-1.66 0-3 1.34-3 3s1.34 3 3 3c.79 0 1.5-.31 2.04-.81l7.12 4.16c-.05.21-.08.43-.08.65 0 1.61 1.31 2.92 2.92 2.92 1.61 0 2.92-1.31 2.92-2.92s-1.31-2.92-2.92-2.92z"/>
          </svg>
        </div>
        <div class="share-options">
          <button class="share-option" data-platform="whatsapp" title="Share on WhatsApp">
            <img src="https://upload.wikimedia.org/wikipedia/commons/6/6b/WhatsApp.svg" alt="WhatsApp" class="share-icon">
            WhatsApp
          </button>
          <button class="share-option" data-platform="instagram" title="Share on Instagram">
            <img src="https://upload.wikimedia.org/wikipedia/commons/a/a5/Instagram_icon.png" alt="Instagram" class="share-icon">
            Instagram
          </button>
          <button class="share-option" data-platform="x" title="Share on X">
            <img src="https://upload.wikimedia.org/wikipedia/commons/6/6f/Logo_of_Twitter.svg" alt="X" class="share-icon">
            X
          </button>
          <button class="share-option" data-platform="copy" title="Copy Link">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
              <path d="M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z"/>
            </svg>
            Copy Link
          </button>
        </div>
        <div id="shareMessage" class="share-message"></div>
      </div>
      
      <div class="notes-container">
        <div class="notes-toggle" title="Notepad">✏️</div>
        <div class="notes-area">
          <div id="notesText" class="content-editable" contenteditable="true" placeholder="Write your notes here..."><%- note %></div>
        </div>
      </div>
      
      <div class="feedback-container">
        <div class="feedback-toggle" title="Provide Feedback">
          <svg fill="currentColor" viewBox="0 0 24 24">
            <path d="M20 2H4c-1.1 0-2 .9-2 2v18l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm0 14H6l-2 2V4h16v12z"/>
            <path d="M9 11h2v2H9zm0-4h2v2H9zm4 0h2v2h-2z"/>
          </svg>
        </div>
        <div class="feedback-area">
          <textarea id="feedbackText" placeholder="Write your feedback here..." required></textarea>
          <button class="submit-feedback">Submit</button>
          <div id="feedbackMessage" class="feedback-message"></div>
        </div>
      </div>
    </div>
    
    <section class="news-feed">
      <!-- New Books Uploaded Today -->
      <h3>New Books Uploaded Today</h3>
      <% if (newBooks.length === 0) { %>
        <div class="news-item">
          <p>No new books uploaded today.</p>
        </div>
      <% } else { %>
        <% newBooks.forEach(book => { %>
          <div class="news-item book-news">
            <div class="news-content">
              <h4>New Book: <%= book.title %> - Author: <%= book.author %></h4>
              <!-- <p class="visibility">
                <span class="visibility-badge visibility-<%= book.visibility %>">
                  <%= book.visibility.charAt(0).toUpperCase() + book.visibility.slice(1) %>
                </span>
              </p> -->
              <% if (book.hasAccess) { %>
                <a href="/view/<%= book._id %>" class="btn btn-primary">Read</a>
              <% } else if (book.visibility === 'public') { %>
                <a href="/view/<%= book._id %>" class="btn btn-primary">Read</a>
              <% } else if (book.visibility === 'restricted') { %>
                <% if (book.hasPendingRequest) { %>
                  <button class="btn btn-secondary disabled" disabled>Request Sent</button>
                <% } else { %>
                  <button class="btn btn-secondary request-access-btn" data-book-id="<%= book._id %>" data-book-title="<%= book.title %>">Request Access</button>
                <% } %>
                <div class="request-message" id="requestMessage-<%= book._id %>"></div>
              <% } %>
            </div>
          </div>
        <% }) %>
      <% } %>

      <!-- News Updates -->
      <h3>Latest Updates</h3>
      <% if (news.length === 0) { %>
        <div class="news-item">
          <p>No news updates available.</p>
        </div>
      <% } else { %>
        <% news.forEach(update => { %>
          <div class="news-item">
            <div class="news-content" id="news-<%= update._id %>">
              <h4><%= update.title %></h4>
              <div class="content-preview"><%- update.content %></div>
              <div class="content-full"><%- update.content %></div>
              <span class="read-more">Read More</span>
              <span class="read-less" style="display: none;">Read Less</span>
              <% if (update.image) { %>
                <img src="/news-image/<%= update._id %>" alt="<%= update.title %> image" class="news-image">
              <% } %>
              <p class="news-timestamp">Posted: <%= new Date(update.createdAt).toLocaleString() %></p>
            </div>
          </div>
        <% }) %>
      <% } %>
    </section>
  </main>

  <footer>
    <div class="container">
      <p>© 2025 BookHive. All rights reserved.</p>
    </div>
  </footer>

  <script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      // Initialize Quill for admin news form
      if (document.getElementById('news-editor')) {
        const quill = new Quill('#news-editor', {
          theme: 'snow',
          modules: {
            toolbar: [
              ['bold', 'italic', 'underline'],
              [{ 'list': 'ordered'}, { 'list': 'bullet' }],
              ['link'],
              ['clean']
            ]
          },
          placeholder: 'Write your news content here...'
        });

        const newsForm = document.getElementById('news-create-form');
        const submitButton = document.getElementById('submit-news');
        newsForm.addEventListener('submit', (e) => {
          document.getElementById('news-content').value = quill.root.innerHTML;
          submitButton.disabled = true;
          submitButton.textContent = 'Posting...';
        });
      }

      // Read More/Read Less Functionality
      document.querySelectorAll('.news-content').forEach(container => {
        const preview = container.querySelector('.content-preview');
        const full = container.querySelector('.content-full');
        const readMore = container.querySelector('.read-more');
        const readLess = container.querySelector('.read-less');

        // Skip book news items (they don't have preview/full)
        if (!preview || !full || !readMore || !readLess) {
          console.log(`Skipping news-content ${container.id}: missing elements`);
          return;
        }

        // Delay to ensure content is rendered
        setTimeout(() => {
          const lineHeight = parseFloat(getComputedStyle(preview).lineHeight) || 20;
          const maxHeight = lineHeight * 5;
          console.log(`News ${container.id}: lineHeight=${lineHeight}, maxHeight=${maxHeight}, scrollHeight=${preview.scrollHeight}`);

          if (preview.scrollHeight > maxHeight + 5) {
            readMore.style.display = 'inline-block';
          } else {
            readMore.style.display = 'none';
          }
        }, 100);

        readMore.addEventListener('click', () => {
          console.log(`Read More clicked for news ${container.id}`);
          preview.style.display = 'none';
          full.style.display = 'block';
          readMore.style.display = 'none';
          readLess.style.display = 'inline-block';
        });

        readLess.addEventListener('click', () => {
          console.log(`Read Less clicked for news ${container.id}`);
          preview.style.display = 'block';
          full.style.display = 'none';
          readMore.style.display = 'inline-block';
          readLess.style.display = 'none';
        });
      });

      // Notes functionality
      const notesToggle = document.querySelector('.notes-toggle');
      const notesArea = document.querySelector('.notes-area');
      const notesText = document.getElementById('notesText');
      let typingTimer;

      if (notesToggle && notesArea) {
        console.log('Notes toggle and area found');
        notesToggle.addEventListener('click', () => {
          console.log('Notes toggle clicked');
          notesArea.classList.toggle('active');
          const feedbackArea = document.querySelector('.feedback-area');
          const shareOptions = document.querySelector('.share-options');
          if (feedbackArea) feedbackArea.classList.remove('active');
          if (shareOptions) shareOptions.classList.remove('active');
        });
      } else {
        console.log('Notes toggle or area not found');
      }

      if (notesText) {
        notesText.addEventListener('input', () => {
          clearTimeout(typingTimer);
          typingTimer = setTimeout(saveNotes, 1000);
        });
      }

      function saveNotes() {
        const content = notesText.innerHTML;
        fetch('/notes/save', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ content })
        })
        .then(response => response.json())
        .then(data => {
          if (!data.success) {
            console.error('Failed to save note:', data.message);
          }
        })
        .catch(err => {
          console.error('Error saving note:', err);
        });
      }

      // Feedback functionality
      const feedbackToggle = document.querySelector('.feedback-toggle');
      const feedbackArea = document.querySelector('.feedback-area');
      const feedbackText = document.getElementById('feedbackText');
      const feedbackMessage = document.getElementById('feedbackMessage');
      const submitFeedbackBtn = document.querySelector('.submit-feedback');

      if (feedbackToggle && feedbackArea) {
        console.log('Feedback toggle and area found');
        feedbackToggle.addEventListener('click', () => {
          console.log('Feedback toggle clicked');
          feedbackArea.classList.toggle('active');
          if (notesArea) notesArea.classList.remove('active');
          const shareOptions = document.querySelector('.share-options');
          if (shareOptions) shareOptions.classList.remove('active');
        });
      } else {
        console.log('Feedback toggle or area not found');
      }

      if (submitFeedbackBtn) {
        submitFeedbackBtn.addEventListener('click', () => {
          const content = feedbackText.value.trim();
          if (!content) {
            feedbackMessage.textContent = 'Please enter your feedback.';
            feedbackMessage.className = 'feedback-message error';
            return;
          }

          feedbackMessage.textContent = 'Submitting...';
          feedbackMessage.className = 'feedback-message';

          fetch('/feedback', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Accept': 'application/json'
            },
            body: JSON.stringify({ content })
          })
          .then(response => {
            if (!response.ok) {
              throw new Error(`HTTP error! Status: ${response.status}`);
            }
            return response.json();
          })
          .then(data => {
            if (data.success) {
              feedbackMessage.textContent = 'Feedback submitted successfully!';
              feedbackMessage.className = 'feedback-message success';
              feedbackText.value = '';
              feedbackArea.classList.remove('active');
            } else {
              feedbackMessage.textContent = data.message || 'Failed to submit feedback.';
              feedbackMessage.className = 'feedback-message error';
            }
          })
          .catch(err => {
            feedbackMessage.textContent = `Error submitting feedback: ${err.message}`;
            feedbackMessage.className = 'feedback-message error';
            console.error('Error submitting feedback:', err);
          });
        });
      }

      // Share functionality
      const shareToggle = document.querySelector('.share-toggle');
      const shareOptions = document.querySelector('.share-options');
      const shareMessage = document.getElementById('shareMessage');
      const currentUrl = window.location.href;

      if (shareToggle && shareOptions) {
        shareToggle.addEventListener('click', () => {
          shareOptions.classList.toggle('active');
          if (notesArea) notesArea.classList.remove('active');
          if (feedbackArea) feedbackArea.classList.remove('active');
        });

        document.addEventListener('click', (e) => {
          if (!shareToggle.contains(e.target) && !shareOptions.contains(e.target)) {
            shareOptions.classList.remove('active');
          }
        });

        const shareButtons = shareOptions.querySelectorAll('.share-option');
        shareButtons.forEach(button => {
          button.addEventListener('click', (e) => {
            e.stopPropagation();
            const platform = button.dataset.platform;
            let url = '';

            switch (platform) {
              case 'whatsapp':
                url = `https://wa.me/?text=${encodeURIComponent('Check out the latest news on BookHive: ' + currentUrl)}`;
                window.open(url, '_blank');
                break;
              case 'instagram':
                url = `https://www.instagram.com/direct/new/?text=${encodeURIComponent('Check out the latest news on BookHive: ' + currentUrl)}`;
                window.open(url, '_blank');
                break;
              case 'x':
                url = `https://twitter.com/intent/tweet?text=Check out the latest news on BookHive: ${encodeURIComponent(currentUrl)}`;
                window.open(url, '_blank');
                break;
              case 'copy':
                navigator.clipboard.writeText(currentUrl)
                  .then(() => {
                    shareMessage.textContent = 'Link copied to clipboard!';
                    shareMessage.className = 'share-message success';
                    setTimeout(() => {
                      shareMessage.textContent = '';
                      shareMessage.className = 'share-message';
                    }, 2000);
                  })
                  .catch(err => {
                    shareMessage.textContent = 'Failed to copy link.';
                    shareMessage.className = 'share-message error';
                    console.error('Copy error:', err);
                  });
                break;
            }
            shareOptions.classList.remove('active');
          });
        });
      }

      // Check session status
      async function checkSession() {
        try {
          const response = await fetch('/account/storage-info', {
            headers: {
              'X-Requested-With': 'XMLHttpRequest'
            }
          });
          if (!response.ok || response.status === 401) {
            console.warn('Session check failed, redirecting to login');
            window.location.href = '/login';
            return false;
          }
          return true;
        } catch (err) {
          console.error('Session check error:', err);
          return false;
        }
      }

      // Request Access functionality
      const requestAccessButtons = document.querySelectorAll('.request-access-btn');
      requestAccessButtons.forEach(button => {
        button.addEventListener('click', async () => {
          const bookId = button.dataset.bookId;
          const bookTitle = button.dataset.bookTitle;
          const messageDiv = document.getElementById(`requestMessage-${bookId}`);

          const isAuthenticated = await checkSession();
          if (!isAuthenticated) {
            messageDiv.textContent = 'Session expired. Please log in again.';
            messageDiv.className = 'request-message error';
            setTimeout(() => { window.location.href = '/login'; }, 2000);
            return;
          }

          if (!confirm(`Request access to "${bookTitle}"?`)) return;

          messageDiv.textContent = 'Sending request...';
          messageDiv.className = 'request-message';

          try {
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 5000);

            const response = await fetch('/request-access', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
              },
              body: JSON.stringify({ bookId }),
              signal: controller.signal
            });

            clearTimeout(timeoutId);

            console.log(`Request access for book ${bookId} response status:`, response.status);
            const contentType = response.headers.get('content-type');
            console.log(`Request access for book ${bookId} content-type:`, contentType);

            if (response.redirected && response.url.includes('/login')) {
              messageDiv.textContent = 'Session expired. Please log in again.';
              messageDiv.className = 'request-message error';
              setTimeout(() => { window.location.href = '/login'; }, 2000);
              return;
            }

            if (!contentType || !contentType.includes('application/json')) {
              const text = await response.text();
              console.error(`Request access for book ${bookId} non-JSON response:`, text.substring(0, 500));
              throw new Error('Server returned non-JSON response');
            }

            const data = await response.json();
            if (response.ok && data.success) {
              messageDiv.textContent = `Access request for "${bookTitle}" sent successfully!`;
              messageDiv.className = 'request-message success';
              button.textContent = 'Request Sent';
              button.disabled = true;
              button.classList.remove('btn-secondary');
              button.classList.add('disabled');
            } else {
              messageDiv.textContent = data.message || 'Failed to send access request.';
              messageDiv.className = 'request-message error';
            }
          } catch (err) {
            console.error(`Request access for book ${bookId} error:`, err);
            messageDiv.textContent = err.name === 'AbortError' ? 'Request timed out.' : `Error: ${err.message}`;
            messageDiv.className = 'request-message error';
          }
        });
      });
    });
  </script>
  <%- include('partials/chatbot') %>
  
  <script src="/js/chatbot.js"></script>
</body>
</html>